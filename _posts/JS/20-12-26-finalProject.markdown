---
layout: post
title: "잘 모르는 것만 골라서 한 썰 1"
subtitle: "GraphQL API 구현하기"
date: 2021-01-01 15:46:00
author: "Dev X"
header-img: "img/post-bg/whatsDat.png"
published: true
catalog: true
tags:
  - React
  - GraphQL
  - Typescript
  - Apollo Client
---

[이 링크는 팀원들과 나눈 회고담입니다](https://www.notion.so/c9d48cef3ca0489284829f4b9632a5c4)<br/>
코드스테이츠에서 진행한 파이널 프로젝트에 대한 회고 글입니다😀

## 🚲새로운 기술 배우기

사실 저희 팀은 첫 번째 프로젝트를 마치기 전부터 다음 프로젝트에서 공부하고 싶었던 것들이 있었습니다😅 프로젝트의 스펙은 전에 배우지 못했던 것들을 추가적으로 공부하는 방향으로 정해졌고 큰 단위로 아래와 같이 나뉘어졌습니다.

1. Graphql Api 구현
   : GraphQL의 편의성을 확인하고, 개발 속도에 얼마나 영향을 주는지 알고 싶었습니다.

2. Typescript 이용한 협업
   : 다같이 Typescript를 공부한 적은 있었으나 프로젝트에 적용해보고 싶었습니다.

3. UI 라이브러리 사용
   : 직접 컴포넌트를 구현했을때와 작업 속도를 비교해보고 싶었습니다.

4. CI/CD 약식 구현
   : 테스트 자동화가 프로젝트 개발에 얼마나 편의를 제공하는지 체험해보고 싶었습니다.

5. Jira와 Slack을 Git 연동하기
   : Git만으로 프로젝트를 관리한 경험이 있었기 때문에 다른 협업 툴을 시도해보고 싶었습니다.

사실 이것 외에도 docker나 nest.js등 더 공부하고 싶었던 것이 많았지만, 한 달이라는 시간 안에 프로젝트를 완성하는 것도 고려해야 했기 때문에, 몇가지는 다음을 기약해야 했었습니다😂

## 📈러닝 커브

프로젝트를 시작하며, SR과 기술 공부를 위한 일주일의 시간을 할당했습니다. 가장 큰 걱정은 Typescript였지만 되돌아보면 Apollo를 공부하는데 더 많은 시간을 썼던것 같습니다😅 학습 기간 동안은 아래와 같이 논의가 이루어졌습니다.

1. 공식 문서를 읽고 스택이 우리의 목적에 적합한지 재 확인한다.
2. 강의 또는 웹서칭을 통해 스택의 실 사용 예를 찾는다.
3. 여러 스택을 혼합해 사용 했을 때 발생하는 문제점(주로 깃 이슈)이 있는지 확인한다.
4. 기술 난이도와 시간 비용을 가늠한다.

이 과정에서 큰 맥락으로 있었던 토론을 요약하자면 아래와 같습니다.

1. GraphQL vs Redux
   : 정확하게 정리하자면, Redux와 GraphQL을 함께 사용 할 것인지에 대한 논의였습니다. 지난 프로젝트에서 Context만으로 상태관리를 구현했기 때문에 Redux를 사용하지 않았었고, 취업을 위해서는 Redux를 한 번쯤 사용하는 것이 좋지 않을까?하는 고민이 있었습니다. 하지만 대부분의 GraphQL Client 라이브러리는 fetch한 data들의 상태 관리를 지원합니다. 예를 들면 저희가 사용한 Apollo는 데이터 정규화와 중앙 상태 관리를 cache로 처리하기 때문에, Redux를 사용하게 되면 데이터를 중복 저장하게 됩니다. 결국 스팩을 위해 불필요한 Redux를 사용하는 것은 맥락에 맞지 않는다는 결론을 내렸습니다.

2. Apollo vs Relay, urql
   : GraphQL의 네트워킹과 캐싱을 위해 라이브러리를 사용하기로 합의 후, 어떤 라이브러리를 사용 할 지가 고민이었습니다. 대표적인 세 라이브러리를 두고 비교했는데 모아진 의견은 아래와 같습니다.

   **Relay**: 성능 최적화라는 장점이 매력적이었지만, 학습 시간이 길기 때문에 다른 기술들과 함께 공부할 수 있는 여유가 없을 것 같았습니다.

   **urql**: 다른 라이브러리에 비해 용량이 경량화 되었다는 장점이 있었지만, 최신 라이브러리이기 때문에 트러블 슈팅 시 참고할 만한 레퍼런스가 부족 할 수 있는 위험이 있었습니다.

   그에 비해 **Apollo Client**는 학습 난이도가 낮은 편이었고, 공식 문서와 채널의 튜토리얼이 다양했기 때문에 접근성이 좋았습니다. 또, 프로젝트의 확장 속도가 빠르고 React 외에 Android나 ios도 지원하는 것도 다른 이유였습니다.

## 🌍GraphQL API 구현하기
